<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">

    <context:component-scan base-package="com.controller"/>
<!--    -->
    <mvc:annotation-driven/>

    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/"></property>
        <property name="suffix" value=".jsp"/>
    </bean>

<!--
    (mapping)
/static/css/demo.css -> /css/demo.css-> loacation设置+/css/demo.css
第二种方法
项目使用这种方法
前后必须有加“/”看上面

location元素表示webapp目录下的static包下的所有文件；

mapping元素表示以/static开头的所有请求路径，如/static/a 或者/static/a/b；

该配置的作用是：DispatcherServlet不会拦截以/static开头的所有请求路径，并当作静态资源

交由Servlet处理。
mapping:写static表示静态的执行
    -->

        <mvc:resources  mapping="/static/**" location="classpath:/public/"></mvc:resources>


<!--
  默认
  第三种方法
  -->
<!--        <mvc:default-servlet-handler default-servlet-name="default"/>-->
</beans>